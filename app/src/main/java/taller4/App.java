/*
 * This source file was generated by the Gradle 'init' task
 */
package taller4;



public class App {
    

    public static void main(String[] args) {
        
        //Coloque los llamados a cada función de acuerdo con cada enunciado
        //codifique el control de errores para el main

         try {
            
            System.out.println(impares(0));
            System.out.println(Fibonacci(20));
            System.out.println(raiz());
            System.out.println(novecientos(200, 300));
            System.out.println(suma_aleatorios(200));
            System.out.println(loteria());
            
        } catch (Exception e) {
           
            System.out.println("error");
            
        }


    }

    /* TODAS LAS FUNCIONES DEBEN LLEVAR CONTROL DE ERRORES, SI EL ENUNCIADO NO LO ESPECIFICA, LO DEBES PONER
     * DE ACUERDO CON TU CRITERIO
     */

    /* 
     * 1.	Escriba una función que reciba un entero positivo entre 100 y 500 y retorne en un texto todos los números impares desde 1 
     * hasta ese número separados por comas en grupos de hasta 8 números.
     * 
    */

    public static String impares(int num_imp_reci) {

        try {

            String impaString = "";
            
            
            if (num_imp_reci >= 100 && num_imp_reci <= 500) {

                int max_imp = num_imp_reci;
                int contador = 1;

                for (short i = 1; i <= max_imp; i++) {

    
                    if (i % 16 == 0) {

                        impaString += "\n";

                    } else if (i % 2 != 0) {
    
                        impaString += i + ", ";
                        
    
                    }       
    
                }
    
                
    
            }

            return impaString;

            

        } catch (Exception e) {
            
            return "error";

        }

    }

    /* 2. 	Escriba una función que reciba un entero N mayor de 2  y retorne un string cono esos N términos de la 
    serie de Fibonacci (La sucesión de Fibonacci se trata de una serie infinita de números naturales que empieza con un 0 y un 1 
    y continúa añadiendo números que son la suma de los dos anteriores: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 
    987, 1597…)
     * 
     * 
    */

     public static String Fibonacci(int N) {

        try {

            int a = 0, b = 1, c = 0;
            String fibo = "";

            for(int i = 2; i <= N; i++) {

                c = a + b;

                if (i == 2) {

                    fibo += a + ", " + b + ", ";

                    

                } 

                    
                if(N == i) {

                    fibo += c + ".";

                } else {

                    fibo += c + ", ";

                }
                

                

                a = b;
                b = c;
                

            }

            return fibo;
            

        } catch (Exception e) {
           
            return "error en la funcion";

        }


    }

    /* 
     * 3.	Diseñar y desarrollar una función que NO reciba datos de entrada, genere aleatoriamente un número entre 2 y 355, 
       le calcule su raíz cuadrada y retorne este valor. Para calcular las raíces usar la función Sqrt de la biblioteca Math.

       En el main, antes de invocar la función, se debe calcular un aleatorio entre 20 y 30 el cual establecerá la cantidad 
       de veces que va a llamar a la función y en un ciclo, mostrar los resultados.

    */

    public static double raiz() {

        try {

            double num = 0, r = 0;
            num = (Math.random() * (355 - 2 + 1) + 2);
            r = Math.sqrt(num);

            return r;
            
            

        } catch (Exception e) {
            
            return -1;

        }
    }




    /*4.	Diseñar y desarrollar una función que reciba un valor inicial y un valor final, para generar 900 números aleatorios 
        en este rango y retorne un texto que diga cuántos números pares fueron generados. Controle que el nro inicial sea menor que 
        nro final para establecer el rango.

        Llame la función desde el main e imprimir el resultado arrojado.
    */

    public static String novecientos(int min, int max){

        try {

            
            int cont_pares = 0;
            String numpares = "";

            if (min > max) {

                return "error";

            } else {

                for (byte i = 1; i <= 90; i++) {

                    int random = (int)(Math.random() * (max - min + 1) + min);
    
                    if (random % 2 == 0) { 
    
                        cont_pares ++;
                        numpares = "Su numero de pares es " + cont_pares;
    
                    }
      
    
                }

            }

            

            

            return numpares;


            


        } catch (Exception e) {
            
            return "error";

        }

    }




    /* 5.	Diseñar y desarrollar una función que calcule una cantidad de números aleatorios que viene como parámetro de entrada 
        y los sume.  La función deberá retornar el total de la suma. Usted defina los rangos que va a usar en el cálculo.

        Llame la función desde el main e imprimir el resultado arrojado.

      
    */

    
    public static int suma_aleatorios(int cantidad) {
        int random = 0;
        int suma = 0;
        int rMin = 1;
        int rMax = 100;

        for (int i = 0; i < cantidad; i++) {
            
            random = (int)(Math.random() * ((rMax - rMin) + 1) + rMin);
            suma += random;
        }

        return suma;
    }


    /* 6.	Se requiere una función para simular el sorteo de una lotería, de acuerdo con las siguientes condiciones:

            La lotería tiene 20 premios. 

            Cada premio que calcula el programa debe tener el número de 4 cifras entre 0000 y 9999 acompañado de la serie 
            que es un número entre 100 y 150.

            Ejemplo: 5698-101

            Cada premio lo debe imprimir el programa de la siguiente forma (n representa un número cualquiera):

            Sorteo # nn - Número Premiado nnnn - Serie nnn

            Ejm: Sorteo # 19  - Número Premiado 5698 - Serie 101

            Para tener en cuenta la forma en la cual se informan los 20 resultados: 

            Del premio 20 al 6 el programa imprime: 

            ======PREMIOS MENORES=======
            y la lista de los 15 premios 

            Del premio 5 al 2 el programa imprime:
            ======PREMIOS SECOS=========
            y la lista de los 4 premios secos

            AL llegar al premio 1, el programa imprime:
            ======Premio mayor==========
            Y el premio mayor

            Nota: para sacar el premio mayor calcule el random por cada número, como lo hacen en la realidad los sorteos.

            La función no recibe parámetros y devuelve un string con toda la lista de premios. El main, invoca la función 
            e imprime el resultado que esta arroje. 


     * 
     * 
    */

    public static String loteria() {
        String resultado = "";
        final byte nro_sorteos = 20, pm = 15, ps = 19, pmayor = 20;

        int Serie = 0, nro_premiado = 0;

        for (byte nro_st = 1; nro_st <= nro_sorteos; nro_st++) {

            nro_premiado = (int)(Math.random()*(9999 - 0000) + 1);
            Serie = (int)(Math.random()*(150 - 100) + 100 + 1);

            
            if (nro_st <= pm) {

                if (nro_st == 1) {

                    resultado += " ======PREMIOS MENORES======= \n";
                    resultado += "Sorteo #" + nro_st + " - Número Premiado " + nro_premiado + " - Serie " + Serie + " \n";

                } else {

                    resultado += "Sorteo #" + nro_st + " - Número Premiado " + nro_premiado + " - Serie " + Serie + " \n";


                }

            } else if (nro_st > pm && nro_st <= ps) {

                if (nro_st == 16) {

                    resultado += " ======PREMIOS SECOS======= \n";
                    resultado += "Sorteo #" + nro_st + " - Número Premiado " + nro_premiado + " - Serie " + Serie + " \n";

                } else {

                    resultado += "Sorteo #" + nro_st + " - Número Premiado " + nro_premiado + " - Serie " + Serie + " \n";


                }


                

            } else if (nro_st == pmayor) {

                resultado += " ======PREMIO MAYOR======= \n";
                resultado += "Sorteo #" + nro_st + " - Número Premiado " + nro_premiado + " - Serie " + Serie + " \n";


            }




        }

        return resultado;


    }

}
